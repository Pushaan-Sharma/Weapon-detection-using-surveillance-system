# -*- coding: utf-8 -*-
"""Testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qeh5-oBSsj_ZHWiF3yuPjQj4d8F7t0Gi
"""

import gdown
url = 'https://www.googleapis.com/drive/v3/files/1Jzd_d4JseCaUNxYos0Cgcekvl9qxHeRo?alt=media&key=AIzaSyAvDG4JNdZIUazRM1zxbmqZfAbX1kkgiTU'
output = 'yolov3_training_2000.weights'
gdown.download(url, output, quiet=False)

url = 'https://www.googleapis.com/drive/v3/files/1k8Rp-H4FVN7RKBGMSQIWs5J7VmE-L67p?alt=media&key=AIzaSyAvDG4JNdZIUazRM1zxbmqZfAbX1kkgiTU'
output = 'yolov3_testing.cfg'
# https://drive.google.com/file/d/1k8Rp-H4FVN7RKBGMSQIWs5J7VmE-L67p/view?usp=share_link
gdown.download(url, output, quiet=False)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Load Yolo
net = cv2.dnn.readNet("yolov3_training_2000.weights", "yolov3_testing.cfg")
classes = ["Weapon"]
# with open("coco.names", "r") as f:
#     classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
colors = np.random.uniform(0, 255, size=(len(classes), 3))

val = "ak47.mp4"

# for video capture
cap = cv2.VideoCapture(val)
writer = None

while True:
    _, img = cap.read()
    height, width, channels = img.shape
    # width = 512
    # height = 512

    # Detecting objects
    blob = cv2.dnn.blobFromImage(img, 0.00392, (416, 416), (0, 0, 0), True, crop=False)

    net.setInput(blob)
    outs = net.forward(output_layers)

    # Showing information on the screen
    class_ids = []
    confidences = []
    boxes = []
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                # Object detected
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Rectangle coordinates
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
    print(indexes)
    if indexes == 0: print("weapon detected in frame")
    font = cv2.FONT_HERSHEY_PLAIN
    for i in range(len(boxes)):
        if i in indexes:
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]])
            color = colors[class_ids[i]]
            cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
            cv2.putText(img, label, (x, y + 30), font, 3, color, 3)

    # frame = cv2.resize(img, (width, height), interpolation=cv2.INTER_AREA)
    cv2_imshow(img)
    key = cv2.waitKey(1)
    if key == 27:
        break
    if writer is None:
        # initialize our video writer
        fourcc = cv2.VideoWriter_fourcc(*"MJPG")
        writer = cv2.VideoWriter('output-weapon.mp4', fourcc, 25,
                                 (img.shape[1], img.shape[0]), True)
    # if the video writer is not None, write the frame to the output
    # video file
    if writer is not None:
        writer.write(img)    
cap.release()
cv2.destroyAllWindows()

